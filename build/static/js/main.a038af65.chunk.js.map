{"version":3,"sources":["firebase.js","redux/modules/bucket.js","Dictionary.js","Addword.js","App.js","reportWebVitals.js","redux/configStore.js","index.js"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","initialState","list","word","explain","etc","loadBucket","bucket_list","type","createBucket","bucket","deleteBucket","bucket_index","console","log","ListStyle","styled","div","Card","Contents","Category","h6","Word","Explanation","Example","Button","button","Dictionary","props","history","useHistory","dispatch","useDispatch","my_lists","useSelector","state","map","index","onClick","bucket_id","id","getState","a","doc","docRef","deleteDoc","_bucket_list","findIndex","b","push","Box","Input","Addword","React","useRef","addWordList","current","value","addDoc","collection","bucket_data","style","textAlign","ref","goBack","Container","App","useState","useEffect","getDocs","forEach","data","className","width","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","middlewares","thunk","rootReducer","combineReducers","action","new_bucket_list","filter","l","idx","parseInt","enhancer","applyMiddleware","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a038af65.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDGUW41PmrM2xleVdHi72G6OCF_QlBfRkA\",\n  authDomain: \"sparta-react-basic-c4949.firebaseapp.com\",\n  projectId: \"sparta-react-basic-c4949\",\n  storageBucket: \"sparta-react-basic-c4949.appspot.com\",\n  messagingSenderId: \"1021191329938\",\n  appId: \"1:1021191329938:web:ccf38054e8562a49ca2e4b\",\n  measurementId: \"G-5R014FJCK1\"\n};\n\n\ninitializeApp(firebaseConfig);\n// Initialize Firebase\n// const app = initializeApp(firebaseConfig);\n\n\nexport const db = getFirestore();","//bucket.js\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n} from \"firebase/firestore\";\n\nimport {db} from \"../../firebase\";\n\n// Actions\nconst LOAD   = 'bucket/LOAD';\nconst CREATE = 'bucket/CREATE';\nconst DELETE = 'bucket/DELETE';\n\n\nconst initialState = {\n  list : [\n    {word: \"개발자\",explain :\"코딩하는사람\",etc:\"임민영 튜터님\"},\n    {word: \"커피\",explain :\"이탈리아에서 기원했다\",etc:\"스타벅스\"},\n    {word: \"커피체인점\",explain :\"커피가 맛있다\",etc:\"이디야\"},\n    ],\n};\n\n// Action Creators\nexport const loadBucket = (bucket_list)=> {\n  return { type: LOAD , bucket_list};\n};\n\nexport const createBucket = (bucket) => {\n  return { type: CREATE, bucket };\n};\n\nexport function deleteBucket(bucket_index){\n  console.log(\"지울 버컷 인덱스\",bucket_index);\n  return {type:DELETE,bucket_index};\n}\n\n// export const updateBucket(bucket_index) {\n//   return {type:UPDATE,bucket_index};\n// }\n\n//middlewares\n// 파이어베이스랑 통신하는 부분\nexport const loadBucketFB = () => {\n  return async function (dispatch) {\n    // 데이터를 가져와요!\n    const bucket_data = await getDocs(collection(db, \"bucket\"));\n    console.log(bucket_data);\n    let bucket_list  = [];\n\n    // 하나씩 우리가 쓸 수 있는 배열 데이터로 만들어줍시다!\n    bucket_data.forEach((b) => {\n      // 콘솔로 확인해요!\n      console.log(b.data());\n      bucket_list.push({id:b.id,...b.data()});\n    });\n    console.log(bucket_list);\n    \n    dispatch(loadBucket(bucket_list));\n  };\n};\nexport const addBucketFB = (bucket) => { \n  return async function (dispatch) {\n   const docRef = await addDoc(collection(db,\"bucket\"),bucket);\n  //  const _bucket = await getDoc(docRef);\n   const bucket_data = {id:docRef.id,...bucket};\n   \n    console.log(bucket_data);\n \n    dispatch(createBucket(bucket_data));\n  };\n};\nexport const deleteBucketFB = (bucket_id) => {\n  return async function(dispatch,getState){\n    console.log(bucket_id);\n    const docRef = await doc(db,\"bucket\",bucket_id);\n    await deleteDoc(docRef);\n    console.log(getState().bucket);\n\n    const _bucket_list = getState().bucket.list;\n\n    const bucket_index = _bucket_list.findIndex((b)=>{\n      return b.id ===bucket_id;\n    });\n    dispatch(deleteBucket(bucket_index));\n  };\n};\n\n\n\n// Reducer\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    // do reducer stuff\n    case \"bucket/LOAD\":\n      return {list:action.bucket_list };\n\n    case \"bucket/CREATE\":\n      const new_bucket_list = [...state.list,action.bucket];\n      return { list : new_bucket_list };\n\n    case \"bucket/DELETE\": {\n      console.log(state,action);\n      const new_bucket_list = state.list.filter((l,idx) => {\n        \n        console.log(parseInt(action.bucket_index)== idx,action.bucket_index,idx);\n        return parseInt(action.bucket_index) !== idx;\n      });\n      \n      return {list:new_bucket_list};\n    };\n    default:\n      return state;  \n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {useHistory} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { db } from \"./firebase\";\nimport { collection, doc, deleteDoc } from \"firebase/firestore\";\nimport { deleteBucket ,deleteBucketFB } from \"./redux/modules/bucket\";\nimport {keyframes} from \"styled-components\";\n\nconst Dictionary = (props) => {\n\n    const history =useHistory();\n    const dispatch = useDispatch();\n    const my_lists = useSelector((state)=> state.bucket.list);\n    \n    \n    return(\n        <>\n            <ListStyle>\n                <p>\n                {my_lists.map((list,index)=> {\n                    return(\n                        <Card>\n                            <Contents>\n                            <Category>단어</Category>\n                            <Word >{list.word}</Word>\n                            </Contents>\n                            <Contents>\n                                <Category>설명</Category>\n                                <Explanation>{list.explain}</Explanation>\n                            </Contents>\n                            <Contents>\n                                <Category>예시</Category>\n                                <Example>{list.etc}</Example>\n                                \n                            </Contents>   \n                            <button onClick = {() => {\n                                console.log(\"삭제하기 버튼을 눌렀어!\")\n                                dispatch(deleteBucketFB(list.id));\n                            }}>delete</button>             \n                        </Card>       \n                    );\n                    })}\n                </p>\n            </ListStyle>\n            <Button onClick={()=> {history.push(\"/addword\"); }}>Add words+</Button>\n        </>    \n    );\n};\nconst ListStyle = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 50vh;\n`;\nconst Card = styled.div`\n  padding: 16px;\n  background-color: #fff;\n  margin: 20px;\n  max-width:25vw;\n  max-height: 25vh;\n  border: 1px solid #fff;\n  display: flex;\n  flex-direction: column;\n  & button {\n      cursor: pointer;\n      background: #3271a8;\n      border: 1px solid #3271a8;\n      width: 50px;\n      margin-left: 80%;\n      border-radius: 35px;\n      color: white;\n      margin-bottom: -5px;\n  }\n   &:hover {\n        box-shadow: rgba(0, 0, 0, 0.15) 0px 5px 15px 0px;\n      }  \n\n`;\nconst Contents = styled.div`\n  height: 50px;\n  border: 1px solid #fff;\n  margin-left: 5px;\n \n`;\nconst Category=styled.h6`\n  text-align:left;\n  text-decoration: underline;\n  margin: 0;\n`;\nconst Word = styled.div`\n    color: black;\n    font-size: 0.8em;\n    text-align: left;\n    max-height: 100%;\n`;\nconst Explanation = styled.div`\n    color: black;\n    font-size: 0.8em;\n    text-align: left;\n    max-height: 100%;\n`;\nconst Example = styled.div`\n    color: #4d8aeb;\n    font-size: 0.8em;\n    text-align: left;\n    max-height: 100%;\n`;\nconst Button = styled.button`\n  background: repeating-linear-gradient( white 0px, lightblue 100px);\n  width: 70px;\n  height: 70px;\n  border-radius: 50%;\n  position: fixed; \n  bottom: 30px; \n  right: 270px;\n  cursor: pointer;\n  border:transparent;\n  &:hover {\n       color : #fff;\n       background: #5292eb;\n       box-shadow: 0 0 10px #2196f3, 0 0 30px #2196f3, 0 0 60px #2196f3;\n      }  \n`;\n\nexport default Dictionary; ","import React from \"react\";\nimport styled from \"styled-components\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useHistory} from \"react-router-dom\"\nimport { createBucket ,addBucketFB} from \"./redux/modules/bucket\";\n\n\nconst Addword = (props) => {\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const word = React.useRef(null);\n    const explain = React.useRef(null);\n    const etc = React.useRef(null);\n    \n\n\n\n    const addWordList = () =>{\n        dispatch(addBucketFB({\n                 word :word.current.value,\n                 explain:explain.current.value,\n                 etc:etc.current.value}));\n\n        // dispatch(createBucket({\n        //      word : word.current.value,\n        //      explain:explain.current.value,\n        //      etc:etc.current.value}));\n        };\n    return(\n                <>\n                    <h2 style={{textAlign: \"center\",}}>단어 추가하기</h2>\n                    <Box>\n                        <Contents>\n                            <Category>단어</Category>\n                            <Input>\n                            <input type=\"text\" ref={word} />\n                            </Input>\n                        </Contents>\n                    </Box>\n                    <Box>\n                        <Contents>\n                            <Category>설명</Category>\n                            <Input>\n                            <input type=\"text\" ref={explain} />\n                            </Input>\n                        </Contents>\n                    </Box>\n                    <Box>\n                        <Contents>\n                            <Category>예시</Category>\n                            <Input>\n                            <input type=\"text\" ref={etc} />\n                            </Input>\n                        </Contents>\n                    </Box>\n                    <Button onClick={() => {\n                        addWordList();\n                        history.goBack();\n                        }}> 추가하기</Button>\n                </>\n                \n        );\n    }\n    \n    const Box = styled.div`\n      background-color: #fff;\n      margin: 10px;\n      height: 60px;\n      border: 1px solid #fff;\n      display: flex;\n      flex-direction: column;\n    `;\n    const Contents = styled.div`\n      height: 50px;\n      border: 1px solid #fff;\n    `;\n    const Category=styled.h6`\n      text-align:left;\n      text-decoration: underline;\n      margin: 0;\n    `;\n   const Input = styled.div`\n   background-color: #fff;\n   border: 1px solid #fff;\n   display: grid;\n   place-items: center;\n   & input {\n    background-color: #fff;\n    padding: 10px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n    width: 85%;\n    \n   }\n   & input:focus {\n     outline :none;\n     border: 1px solid orange;\n     width: 85%;\n   }\n   `;\n   const Button = styled.button`\n    background-color: #5894f5;\n    color: #fff;\n    width: 25vw;\n    height: 35px;\n    margin: auto;\n    border-radius: 50px;\n    border:#5894f5;\n    cursor: pointer;\n    &:hover {\n        box-shadow: rgba(0, 0, 0, 0.15) 0px 5px 15px 0px;\n      }  \n   `;\nexport default Addword;","import React from \"react\";\nimport {Route , useHistory} from \"react-router-dom\";\nimport Dictionary from './Dictionary';\nimport Addword from './Addword';\nimport styled from 'styled-components';\nimport {db} from \"./firebase\";\nimport { collection,getDocs,addDoc,updateDoc,doc ,deleteDoc} from \"firebase/firestore\";\nimport { useDispatch } from \"react-redux\";\nimport { loadBucketFB } from \"./redux/modules/bucket\";\n\n\nfunction App() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const [list,setList] = React.useState ([\n    {word: \"개발자\",explain :\"코딩하는사람\",etc:\"임민영 튜터님\"},\n    {word: \"커피\",explain :\"이탈리아에서 기원했다\",etc:\"스타벅스\"},\n    ]);\n  \n    React.useEffect( () => {\n    dispatch(loadBucketFB());\n  }, []);\n\n       // 정보삭제하기\n      // const docRef = doc(db,\"bucket\",\"mEnM5YxMNKAr6JAFeKIJ\");\n      // deleteDoc(docRef);\n\n      // 수정하기 \n      // const docRef = doc(db,\"bucket\",\"LK4MI2VDY0Wn2rZylsji\");\n      // updateDoc(docRef,{word:\"생선\"});\n\n\n     //새로운거추가하기 \n    //  addDoc(collection(db,\"bucket\"),{word:\"new\",explain:\"설명\",etc:\"addDoc\"});\n\n      //도큐먼트 가져오기\n      //  const query = await getDocs(collection(db,\"bucket\"));\n      // console.log(query);\n      // query.forEach((doc)=>{\n      //    console.log(doc.id,doc.data());\n      // });\n\n    \n\n  return (\n    <div className=\"App\">\n      <Container>\n        <h1 style ={{textAlign : \"center\",width:\"30vw\",}}>My DICTIONARY</h1>\n        <Route path=\"/\" exact>\n          <Dictionary list={list}/>\n        </Route>\n        <Route path=\"/addword\">\n          <Addword/>\n        </Route>\n      </Container>\n      \n    </div>\n  );\n}\nconst Container = styled.div`\n  max-width : 30vw;\n  height : 90vh;\n  background-color: aliceblue;\n  padding: 10px;\n  margin: 20px auto;\n  border : 1px solid aliceblue;\n  overflow-x: hidden;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//configStore.js\nimport { createStore, combineReducers,applyMiddleware,compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport bucket from \"./modules/bucket\"; \n\n\nconst middlewares = [thunk];\nconst rootReducer = combineReducers({ bucket });\nconst enhancer = applyMiddleware(...middlewares);\n\n\n// 스토어를 만듭니다.\nconst store = createStore(rootReducer,enhancer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\n\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/configStore\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}